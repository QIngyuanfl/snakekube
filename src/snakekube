#!/usr/bin/env python
# -*- coding: utf-8 -*- ￼
# Author: Qingyuan Zhang
# Date: 2021/05/17
# Version: 1.2
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import re
import os
import time
import string
import random
import argparse
import pandas as pd
import yaml
import kubernetes
from kubernetes import config,client
from kubernetes.client import Configuration
from kubernetes.client.api import core_v1_api
from kubernetes.client.rest import ApiException


class SnakeJob:
    def __init__(self) -> None:
        self.name = ""
        self.monitor = False

    def watch_commands(self) -> dict:
        """
        return pods resource metrics
        """
        api = client.CustomObjectsApi()
        selector = f'metadata.name={self.name}'
        
        pods = api.list_cluster_custom_object("metrics.k8s.io", "v1beta1", "pods", field_selector = selector)
        if pods['items'] != []:
            return pods['items'][0]['containers'][0]['usage']
        else:
            return {'cpu':'0', 'memory':'0'}

    def exec_commands(self, cmd = None, image = None, cpu = None, memory = None, pvc = None, mountPath = '/', labels = None, nodeSelect = 'all', iswatch = False):
        random.seed(time.time())
        letters = string.ascii_lowercase
        rand_letters = ''.join(random.choices(letters, k = 5))
        cli = re.sub('_|\.|=|\/', '', cmd.split()[0].lower())
        self.name = f'{cli}-{rand_letters}'
        pod_manifest = {
            'apiversion': 'v1',
            'kind': 'Pod', 
            'metadata': {
                'name': self.name,
                'annotations': {
                    "k8s.aliyun.com/eci-image-cache": "true"
                },
                'labels':  {
                    'project': labels
                } 
                  
            },
            'spec': {
                'securityContext':{
                    'runAsUser': os.getuid(),
                    'runAsGroup': os.getgid()
                },
                'containers': [{
                    'image': image,
                    'imagePullPolicy': "IfNotPresent",
                    'name': cli,
                    'command': ["/bin/sh"],
                    'args': [
                        '-c',
                        cmd
                    ],
                    'resources': {
                        'requests': {
                            'cpu': cpu,
                            'memory': memory
                        },
                    },
                    'volumeMounts': [{
                        'name': "cache-volume",
                        'mountPath': '/project'
                        }]
                }],
                'volumes': [{
                    'name': "cache-volume", 
                    'nfs': {
                        'server': '2817048100-gmm16.cn-shenzhen.nas.aliyuncs.com', 
                        'path': mountPath
                    }
                }],
                'restartPolicy': 'Never'
            }
        }
        if nodeSelect == 'all':
            pass
        elif nodeSelect == 'physical':
            pod_manifest['spec']['nodeSelector'] = {'type': 'physical'}
        else:
            pod_manifest['spec']['nodeSelector'] = {'kubernetes.io/hostname': nodeSelect}
        
        resp = core_v1_api.CoreV1Api().create_namespaced_pod(body=pod_manifest, namespace='default')
        while True:
            resp = core_v1_api.CoreV1Api().read_namespaced_pod(name=self.name, 
            namespace= 'default')
            if resp.status.phase != 'Pending':
                break
            time.sleep(10)
        print(f'POD {self.name} Running')
        time.sleep(1)
        # get stdout from logs
        core_v1_api.CoreV1Api().read_namespaced_pod_log(self.name, namespace = 'default', follow = True)
        # Check Pod status
        if iswatch:
            count = 0
            tmp_memory = 0
            cpu = 0
        while True:
            resp = core_v1_api.CoreV1Api().read_namespaced_pod(name=self.name,
            namespace= 'default')
            if iswatch:
                usage = self.watch_commands()
                table_file =  'Check_utility_for_Sample.txt'
                if_table = os.path.exists(table_file)
                if if_table:
                    df = pd.read_table(table_file, index_col = 'Queue')
                else:
                    df = pd.DataFrame(columns = ['RunTime(min)', 'MaxMemory(Ki)', 'MeanLoad(n)'])
                    df.index.name = 'Queue'
                count += 1
                cpu += float(re.search('\d*', usage['cpu']).group())
                mean_cpu = cpu/count
                memory = float(re.search('\d*', usage['memory']).group())
                runtime = (datetime.datetime.now(datetime.timezone.utc) - resp.status.start_time).total_seconds()/60
                if memory > tmp_memory:
                    df.loc[self.name] = [runtime, memory, mean_cpu]
                else:
                    df.loc[self.name] = [runtime, tmp_memory, mean_cpu]
                df.to_csv('Check_utility_for_Sample.txt', sep = '\t')
                    
            if resp.status.phase != 'Running':
                break
            time.sleep(10)
        time.sleep(10)
        if resp.status.phase == 'Succeeded':
        # detect output 
            file_regex = re.compile('/project/[^\*|\s]+/[^\*|\s]+\.[^/|\s|\W]+')
            if len((file_list := file_regex.findall(cmd))) > 0:
                for files in file_list:
                    n = 0
                    while not os.path.exists(files):
                        time.sleep(1)
                        n += 1
                        if n > 120:
                            break
                    
        if resp.status.phase == 'Failed':
           with open(f'{self.name}.log', 'w') as f:
                f.write(f'startTime:{resp.status.start_time}\n')
                f.write(f"command:\n{cmd}\n")
                f.write(f"{core_v1_api.CoreV1Api().read_namespaced_pod_log(self.name, namespace = 'default')}")
        core_v1_api.CoreV1Api().delete_namespaced_pod(self.name, 'default')
    
def realloc(args,c):
    """
读取正在运行的pod状态，并重新分配pod的资源(仅使用与物理节点)
    """
    poid = args.po
    ram = args.ram
    cpu = args.cpu

    with kubernetes.client.ApiClient(c) as api_client:
        api_core = kubernetes.client.CoreV1Api(api_client)
        api_custom = kubernetes.client.CustomObjectsApi(api_client)
    try:
        api_response = api_core.read_namespaced_pod(poid, "default", pretty=True)
    except ApiException as e:
        print("Exception when calling CoreV1Api->read_namespaced_pod: %s\n" % e)

    group = 'resources.alibabacloud.com'
    version = 'v1alpha1'
    plural = 'cgroups'
    body = {
        'apiVersion': 'resources.alibabacloud.com/v1alpha1', 
        'kind': 'Cgroups', 
        'metadata': {
            'name': f'cgroups-{poid}'}, 
        'spec': {
            'pod': {
                'name': poid, 
                'namespace': 'default', 
                'containers': [{
                    'name': poid, 
                    'cpu': cpu, 
                    'memory': ram
                    }]
                    }
                }
            }
    try:
        api_response = api_custom.create_namespaced_custom_object(group, version, 'default', plural, body)
    except ApiException as e:
        print("Exception when calling CustomObjectsApi->create_cluster_custom_object: %s\n" % e)
    
    time.sleep(0.5)
    try:
        api_response = api_custom.delete_namespaced_custom_object(group, version, 'default', plural, f'cgroups-{poid}')
    except ApiException as e:
        print("Exception when calling CustomObjectsApi->delete_namespaced_custom_object: %s\n" % e)


def main():
    config.load_kube_config()
    try:
        c = Configuration().get_default_copy()
    except AttributeError:
        c = Configuration()
        c.assert_hostname = False
    Configuration.set_default(c)
    labels = 'default'
    mountPath = '/'
    nodeSelect = 'all'
    
    if args.cmd:
        cmd = ' '.join(args.cmd)
    if args.cpu:
        cpu = args.cpu
    if args.ram:
        memory = args.ram
    if args.config:
        with open(args.config) as f:
            setup = yaml.load(f, Loader = yaml.FullLoader)
            if 'cmd' in setup:
                cmd = setup['cmd']
            if 'image' in setup:
                image = setup['image']
            if 'cpu' in setup:
                cpu = setup['cpu']
            if 'memory' in setup:
                memory = setup['memory']
            if 'labels' in setup:
                labels = setup['labels']
            if 'mountPath' in setup:
                mountPath = setup['mountPath']
            else:
                mountPath = '/'
            if 'nodeSelect' in setup:
                nodeSelect = setup['nodeSelect']
    if args.image:
        image = args.image
    if args.local:
        nodeSelect = 'physical'
    if args.node:
        nodeSelect = args.node
    if args.watch:
        watch = True
    else:
        watch = False
    
    jobs.exec_commands(cmd = cmd, 
        image = image, 
        cpu = cpu, 
        memory = memory,
        labels = labels, 
        mountPath = mountPath, 
        nodeSelect = nodeSelect,
        iswatch = watch)

if __name__ == '__main__':
    jobs = SnakeJob()
    parser = argparse.ArgumentParser(description='turn snakemake jobs to pods')
    parser.add_argument('-m', '--image', help = "Docker image name")
    parser.add_argument('-c', '--cmd', nargs = '+', help = 'shell commad to run in container')
    parser.add_argument('-p', '--cpu', default = 1, help = 'how many cpus to apply')
    parser.add_argument('-r', '--ram', help = 'how much memory to apply')
    parser.add_argument('-f', '--config', help = 'Optionally,  you could provide a yaml configuration file instead of args')
    parser.add_argument('--local', dest = 'local', action = 'store_true', help = 'excute in physical node')
    parser.add_argument('-w', '--watch', dest = 'watch', action = 'store_true', help = 'Obtain current pod resource matric')
    parser.add_argument('-n', '--node', help = 'Select a node or node label to execute')
    subparsers = parser.add_subparsers()
    parser_a = subparsers.add_parser('realloc', help = "reallocate resources for a pod")
    parser_a.add_argument('-p', '--po', required = True, help = "pod id to reallocate resources")
    parser_a.add_argument('-r', '--ram', required = True, help = 'how much memory to apply')
    parser_a.add_argument('-c', '--cpu', default = 1, help = 'how many cpus to apply')
    parser_a.set_defaults(func=realloc)
    args = parser.parse_args()
    
    if hasattr(args, "func"):
        args.func(args)
    else:
        main()
